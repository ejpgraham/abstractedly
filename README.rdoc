Abstractedly - A readme

The concept:

Abstractedly is a simple, lightweight Rails app that helps scientists and other scholarly journal readers to more easily view and organize abstracts of recent articles. Abstracts are summaries of highly complex articles that are published in scholarly journals. These journals' websites makes it difficult for viewers to quickly view all of the abstracts in a given journal issue.

Abstractedly was the idea of a scientist, specifically to look up abstracts published by nuclear medicine journals. However, its structure and principals work for every scholarly journal, ranging from sociology to literary criticism publications.

How it works:

Abstractedly uses the ____ gem to make a GET request to a journal's RSS feed, which helpfully contain the body, title, author, and other attributes of the abstract model. Abstracts belong to a given journal issue - identifiable by its publication date and issue number. Journals in turn belong to the journal feed, which represents the homepage of the publication itself.

Logic in the Scraper class checks if a journal issue has already been scraped from the journal feed. If it hasn't, it collects the abstracts from the journal feed, and instantiates a journal with the associated abstracts. Abstractedly uses a rake to check for new journal issues several times a day.

Problems:

Abstracts have many keywords - these act as tags/hashtags to better group abstracts of the same topic. Irritatingly, the keywords are not listed on the RSS feed. Inclusion of the keywords is nice for the user,  but not necessary for the application to function properly.

My plan is use the url from each abstract to perform another GET request and mine the keywords from each abstract - once the primary functions of the application are up and running.

Additionally, there does not appear to be an easy to way to automate adding new journal feeds to the application. The RSS feeds for different scholarly journals are not always set up the same way. However, a template speeds up the process of adding a new journal feed greatly.

The User Experience:

The User expects a simple, clean interface as the abstracts are the star of the show. The subscription manager page allows the user to select which journal feeds they interested in. Once a user is 'subscribed' to a journal feed, its associated journal issues and abstracts 
